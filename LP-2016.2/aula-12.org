#+Title: Aula 12
#+Date: <2016-09-14 Wed>


#+BEGIN_SRC scheme
(define (filter predicate sequence)
  (cond ((null? sequence)
         empty)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (range low high)
  (if (> low high)
      empty
      (cons low (range (+ low 1) high))))

(define (enumerate-tree tree)
  (cond ((null? tree) empty)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))

(define (sum-odd-squares tree)
  (accumulate + 0
              (map sqr
                   (filter odd? (enumerate-tree tree)))))
#+END_SRC

#+BEGIN_SRC scheme
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) empty sequence))

(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
#+END_SRC
